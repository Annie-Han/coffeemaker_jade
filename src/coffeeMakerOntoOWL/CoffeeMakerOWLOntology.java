// file: CoffeeMakerOWLOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package coffeeMakerOntoOWL;

import jade.content.onto.*;
import jade.content.schema.*;

/** file: CoffeeMakerOWLOntology.java
 * @author OntologyBeanGenerator v4.1
 * @version 2014/06/20, 15:47:24
 */
public class CoffeeMakerOWLOntology extends jade.content.onto.Ontology  {

  private static final long serialVersionUID = -3583265682521255949L;

  //NAME
  public static final String ONTOLOGY_NAME = "coffeeMakerOWL";
  // The singleton instance of this ontology
  private static Ontology theInstance = new CoffeeMakerOWLOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String READWATERTEMP_WATERTEMP="waterTemp";
    public static final String READWATERTEMP="ReadWaterTemp";
    public static final String START="Start";
    public static final String WATERTEMPSENSOR_WATERTEMP="waterTemp";
    public static final String WATERTEMPSENSOR_WATERTEMPSTATE="waterTempState";
    public static final String WATERTEMPSENSOR="WaterTempSensor";
    public static final String WATERPRESSMODULE="WaterPressModule";
    public static final String RELIEFVALVE="ReliefValve";
    public static final String SENSOR="Sensor";
    public static final String WATERPRESSENSOR="WaterPresSensor";
    public static final String MODULE_HASACTOR="hasActor";
    public static final String MODULE_HASSENSOR="hasSensor";
    public static final String MODULE="Module";
    public static final String HEATWATERMODULE="HeatWaterModule";
    public static final String ACTOR_START="start";
    public static final String ACTOR="Actor";
    public static final String WATERHEATER="WaterHeater";

  /**
   * Constructor
  */
  private CoffeeMakerOWLOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema waterHeaterSchema = new ConceptSchema(WATERHEATER);
    add(waterHeaterSchema, coffeeMakerOntoOWL.WaterHeater.class);
    ConceptSchema actorSchema = new ConceptSchema(ACTOR);
    add(actorSchema, coffeeMakerOntoOWL.Actor.class);
    ConceptSchema heatWaterModuleSchema = new ConceptSchema(HEATWATERMODULE);
    add(heatWaterModuleSchema, coffeeMakerOntoOWL.HeatWaterModule.class);
    ConceptSchema moduleSchema = new ConceptSchema(MODULE);
    add(moduleSchema, coffeeMakerOntoOWL.Module.class);
    ConceptSchema waterPresSensorSchema = new ConceptSchema(WATERPRESSENSOR);
    add(waterPresSensorSchema, coffeeMakerOntoOWL.WaterPresSensor.class);
    ConceptSchema sensorSchema = new ConceptSchema(SENSOR);
    add(sensorSchema, coffeeMakerOntoOWL.Sensor.class);
    ConceptSchema reliefValveSchema = new ConceptSchema(RELIEFVALVE);
    add(reliefValveSchema, coffeeMakerOntoOWL.ReliefValve.class);
    ConceptSchema waterPressModuleSchema = new ConceptSchema(WATERPRESSMODULE);
    add(waterPressModuleSchema, coffeeMakerOntoOWL.WaterPressModule.class);
    ConceptSchema waterTempSensorSchema = new ConceptSchema(WATERTEMPSENSOR);
    add(waterTempSensorSchema, coffeeMakerOntoOWL.WaterTempSensor.class);

    // adding AgentAction(s)
    AgentActionSchema startSchema = new AgentActionSchema(START);
    add(startSchema, coffeeMakerOntoOWL.Start.class);

    // adding AID(s)

    // adding Predicate(s)
    PredicateSchema readWaterTempSchema = new PredicateSchema(READWATERTEMP);
    add(readWaterTempSchema, coffeeMakerOntoOWL.ReadWaterTemp.class);


    // adding fields
    actorSchema.add(ACTOR_START, startSchema, ObjectSchema.OPTIONAL);
    moduleSchema.add(MODULE_HASSENSOR, sensorSchema, 0, ObjectSchema.UNLIMITED);
    moduleSchema.add(MODULE_HASACTOR, actorSchema, 0, ObjectSchema.UNLIMITED);
    waterTempSensorSchema.add(WATERTEMPSENSOR_WATERTEMPSTATE, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    waterTempSensorSchema.add(WATERTEMPSENSOR_WATERTEMP, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);
    readWaterTempSchema.add(READWATERTEMP_WATERTEMP, (TermSchema)getSchema(BasicOntology.FLOAT), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance
    waterHeaterSchema.addSuperSchema(actorSchema);
    heatWaterModuleSchema.addSuperSchema(moduleSchema);
    waterPresSensorSchema.addSuperSchema(sensorSchema);
    reliefValveSchema.addSuperSchema(actorSchema);
    waterPressModuleSchema.addSuperSchema(moduleSchema);
    waterTempSensorSchema.addSuperSchema(sensorSchema);

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
}
